// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/v1/doer/doer_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	doer "github.com/bogatyr285/golang-boilerplate/api/v1/doer"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDoerAPIClient is a mock of DoerAPIClient interface.
type MockDoerAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockDoerAPIClientMockRecorder
}

// MockDoerAPIClientMockRecorder is the mock recorder for MockDoerAPIClient.
type MockDoerAPIClientMockRecorder struct {
	mock *MockDoerAPIClient
}

// NewMockDoerAPIClient creates a new mock instance.
func NewMockDoerAPIClient(ctrl *gomock.Controller) *MockDoerAPIClient {
	mock := &MockDoerAPIClient{ctrl: ctrl}
	mock.recorder = &MockDoerAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoerAPIClient) EXPECT() *MockDoerAPIClientMockRecorder {
	return m.recorder
}

// DoAwesome mocks base method.
func (m *MockDoerAPIClient) DoAwesome(ctx context.Context, in *doer.DoAwesomeRequest, opts ...grpc.CallOption) (*doer.DoAwesomeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoAwesome", varargs...)
	ret0, _ := ret[0].(*doer.DoAwesomeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoAwesome indicates an expected call of DoAwesome.
func (mr *MockDoerAPIClientMockRecorder) DoAwesome(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAwesome", reflect.TypeOf((*MockDoerAPIClient)(nil).DoAwesome), varargs...)
}

// MockDoerAPIServer is a mock of DoerAPIServer interface.
type MockDoerAPIServer struct {
	ctrl     *gomock.Controller
	recorder *MockDoerAPIServerMockRecorder
}

// MockDoerAPIServerMockRecorder is the mock recorder for MockDoerAPIServer.
type MockDoerAPIServerMockRecorder struct {
	mock *MockDoerAPIServer
}

// NewMockDoerAPIServer creates a new mock instance.
func NewMockDoerAPIServer(ctrl *gomock.Controller) *MockDoerAPIServer {
	mock := &MockDoerAPIServer{ctrl: ctrl}
	mock.recorder = &MockDoerAPIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoerAPIServer) EXPECT() *MockDoerAPIServerMockRecorder {
	return m.recorder
}

// DoAwesome mocks base method.
func (m *MockDoerAPIServer) DoAwesome(arg0 context.Context, arg1 *doer.DoAwesomeRequest) (*doer.DoAwesomeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoAwesome", arg0, arg1)
	ret0, _ := ret[0].(*doer.DoAwesomeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoAwesome indicates an expected call of DoAwesome.
func (mr *MockDoerAPIServerMockRecorder) DoAwesome(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAwesome", reflect.TypeOf((*MockDoerAPIServer)(nil).DoAwesome), arg0, arg1)
}

// mustEmbedUnimplementedDoerAPIServer mocks base method.
func (m *MockDoerAPIServer) mustEmbedUnimplementedDoerAPIServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDoerAPIServer")
}

// mustEmbedUnimplementedDoerAPIServer indicates an expected call of mustEmbedUnimplementedDoerAPIServer.
func (mr *MockDoerAPIServerMockRecorder) mustEmbedUnimplementedDoerAPIServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDoerAPIServer", reflect.TypeOf((*MockDoerAPIServer)(nil).mustEmbedUnimplementedDoerAPIServer))
}

// MockUnsafeDoerAPIServer is a mock of UnsafeDoerAPIServer interface.
type MockUnsafeDoerAPIServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDoerAPIServerMockRecorder
}

// MockUnsafeDoerAPIServerMockRecorder is the mock recorder for MockUnsafeDoerAPIServer.
type MockUnsafeDoerAPIServerMockRecorder struct {
	mock *MockUnsafeDoerAPIServer
}

// NewMockUnsafeDoerAPIServer creates a new mock instance.
func NewMockUnsafeDoerAPIServer(ctrl *gomock.Controller) *MockUnsafeDoerAPIServer {
	mock := &MockUnsafeDoerAPIServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDoerAPIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDoerAPIServer) EXPECT() *MockUnsafeDoerAPIServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDoerAPIServer mocks base method.
func (m *MockUnsafeDoerAPIServer) mustEmbedUnimplementedDoerAPIServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDoerAPIServer")
}

// mustEmbedUnimplementedDoerAPIServer indicates an expected call of mustEmbedUnimplementedDoerAPIServer.
func (mr *MockUnsafeDoerAPIServerMockRecorder) mustEmbedUnimplementedDoerAPIServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDoerAPIServer", reflect.TypeOf((*MockUnsafeDoerAPIServer)(nil).mustEmbedUnimplementedDoerAPIServer))
}
