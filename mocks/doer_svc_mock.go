// Code generated by MockGen. DO NOT EDIT.
// Source: ./doer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDoerService is a mock of DoerService interface.
type MockDoerService struct {
	ctrl     *gomock.Controller
	recorder *MockDoerServiceMockRecorder
}

// MockDoerServiceMockRecorder is the mock recorder for MockDoerService.
type MockDoerServiceMockRecorder struct {
	mock *MockDoerService
}

// NewMockDoerService creates a new mock instance.
func NewMockDoerService(ctrl *gomock.Controller) *MockDoerService {
	mock := &MockDoerService{ctrl: ctrl}
	mock.recorder = &MockDoerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoerService) EXPECT() *MockDoerServiceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockDoerService) Do(ctx context.Context, input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockDoerServiceMockRecorder) Do(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDoerService)(nil).Do), ctx, input)
}
