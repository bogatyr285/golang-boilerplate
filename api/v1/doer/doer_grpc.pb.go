// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/v1/doer/doer.proto

package doer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DoerAPIClient is the client API for DoerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoerAPIClient interface {
	DoAwesome(ctx context.Context, in *DoAwesomeRequest, opts ...grpc.CallOption) (*DoAwesomeResponse, error)
}

type doerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDoerAPIClient(cc grpc.ClientConnInterface) DoerAPIClient {
	return &doerAPIClient{cc}
}

func (c *doerAPIClient) DoAwesome(ctx context.Context, in *DoAwesomeRequest, opts ...grpc.CallOption) (*DoAwesomeResponse, error) {
	out := new(DoAwesomeResponse)
	err := c.cc.Invoke(ctx, "/api.v1.doer.DoerAPI/DoAwesome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoerAPIServer is the server API for DoerAPI service.
// All implementations must embed UnimplementedDoerAPIServer
// for forward compatibility
type DoerAPIServer interface {
	DoAwesome(context.Context, *DoAwesomeRequest) (*DoAwesomeResponse, error)
	mustEmbedUnimplementedDoerAPIServer()
}

// UnimplementedDoerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedDoerAPIServer struct {
}

func (UnimplementedDoerAPIServer) DoAwesome(context.Context, *DoAwesomeRequest) (*DoAwesomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoAwesome not implemented")
}
func (UnimplementedDoerAPIServer) mustEmbedUnimplementedDoerAPIServer() {}

// UnsafeDoerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoerAPIServer will
// result in compilation errors.
type UnsafeDoerAPIServer interface {
	mustEmbedUnimplementedDoerAPIServer()
}

func RegisterDoerAPIServer(s grpc.ServiceRegistrar, srv DoerAPIServer) {
	s.RegisterService(&DoerAPI_ServiceDesc, srv)
}

func _DoerAPI_DoAwesome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoAwesomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoerAPIServer).DoAwesome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.doer.DoerAPI/DoAwesome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoerAPIServer).DoAwesome(ctx, req.(*DoAwesomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DoerAPI_ServiceDesc is the grpc.ServiceDesc for DoerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.doer.DoerAPI",
	HandlerType: (*DoerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoAwesome",
			Handler:    _DoerAPI_DoAwesome_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/doer/doer.proto",
}
