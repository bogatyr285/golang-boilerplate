// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/615b89c00f9e38527ee19ca594d3569104e5ea48/templates/opencensus
// gowrap: http://github.com/hexdigest/gowrap

package repository

//go:generate gowrap gen -p github.com/bogatyr285/golang-boilerplate/internal/services/repository -i DatabaseRepository -t https://raw.githubusercontent.com/hexdigest/gowrap/615b89c00f9e38527ee19ca594d3569104e5ea48/templates/opencensus -o db_tracing_decorator.go -l ""

import (
	"context"

	"github.com/bogatyr285/golang-boilerplate/internal/models"
	"go.opencensus.io/trace"
)

// DatabaseRepositoryWithTracing implements DatabaseRepository interface instrumented with opentracing spans
type DatabaseRepositoryWithTracing struct {
	DatabaseRepository
	_instance      string
	_spanDecorator func(span *trace.Span, params, results map[string]interface{})
}

// NewDatabaseRepositoryWithTracing returns DatabaseRepositoryWithTracing
func NewDatabaseRepositoryWithTracing(base DatabaseRepository, instance string, spanDecorator ...func(span *trace.Span, params, results map[string]interface{})) DatabaseRepositoryWithTracing {
	d := DatabaseRepositoryWithTracing{
		DatabaseRepository: base,
		_instance:          instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// GetSomething implements DatabaseRepository
func (_d DatabaseRepositoryWithTracing) GetSomething(ctx context.Context, query string) (spa1 []*models.Something, err error) {
	ctx, _span := trace.StartSpan(ctx, _d._instance+".DatabaseRepository.GetSomething")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"query": query}, map[string]interface{}{
				"spa1": spa1,
				"err":  err})
		} else if err != nil {
			_span.AddAttributes(
				trace.BoolAttribute("error", true),
				trace.StringAttribute("event", "error"),
				trace.StringAttribute("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.DatabaseRepository.GetSomething(ctx, query)
}

// InsertSomething implements DatabaseRepository
func (_d DatabaseRepositoryWithTracing) InsertSomething(ctx context.Context, records *models.Something) (err error) {
	ctx, _span := trace.StartSpan(ctx, _d._instance+".DatabaseRepository.InsertSomething")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"records": records}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.AddAttributes(
				trace.BoolAttribute("error", true),
				trace.StringAttribute("event", "error"),
				trace.StringAttribute("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.DatabaseRepository.InsertSomething(ctx, records)
}
